resolver ${RESOLVER}; # use Docker's DNS entries

include /etc/nginx/snippets/options-headers.conf;
proxy_hide_header Access-Control-Allow-Origin;
add_header Access-Control-Allow-Origin "$http_origin" always;
add_header Access-Control-Allow-Credentials "true";

# set $needed_permission $project;
# $is_authorized is a njs function
# if ($is_authorized = false) {
#     return 403;
# }

# If a service does a relative redirect it should be rewritten
set $redirect_proto $scheme;
if ($http_x_forwarded_proto) {
 set $redirect_proto $http_x_forwarded_proto;
}
proxy_redirect ~^/(.*) $redirect_proto://$http_host${DOCKNET_BASE_URL}/projects/$project_id/services/$service_id/access/$endpoint/$1;
proxy_set_header Host $host;

proxy_set_header X-Forwarded-Host $host;
proxy_set_header X-Forwarded-Server $host;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_http_version 1.1;
proxy_pass_request_headers on;

proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $connection_upgrade;
proxy_store off;

gzip on;
gzip_proxied any;
gzip_types *;

# only rewrite if endpoint ends with a 'b' character (as defined by us)
if ($extended_endpoint !~ ^[0-9]+b$) {
  rewrite ${DOCKNET_BASE_URL}/projects/(?<project_id>[a-zA-Z0-9\-]+)/services/(?<service_id>[a-zA-Z0-9\-]+)/access/(?<extended_endpoint>(?<endpoint>[0-9]+)b?)/?(?<remaining_part>.*) /$remaining_part break;
}

proxy_pass http://$service_id$service_suffix:$endpoint;
